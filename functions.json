{
  "functions": {
    "async": [
      "({ eval \"$@\"; } &) >/dev/null 2>&1"
    ],
    "atom": [
      "eval \"function ${1}() echo ${1}\""
    ],
    "c": [
      "pbcopy"
    ],
    "calc": [
      "echo \"$*\" | bc -l"
    ],
    "cf": [
      "pbpaste|pbcopy"
    ],
    "dirbak": [
      "cp -r \"${1}\" \"${1}.bak\""
    ],
    "dirrest": [
      "cp -r \"${1}.bak\" \"${1}\" && \\",
      "rm -rf \"${1}.bak\""
    ],
    "eachchar": [
      "sd \"(^\\s+|\\s+$)\" \"\" | sd \"\" \"\n\""
    ],
    "eachword": [
      "sd \" \" \"\\n\""
    ],
    "filebak": [
      "cp \"${1}\"{,.bak}"
    ],
    "filerest": [
      "cp \"${1}\"{.bak,} && rm \"${1}.bak\""
    ],
    "global": [
      "# use: global number=33",
      "unsetopt warncreateglobal",
      "eval \"${@}\"",
      "setopt warncreateglobal"
    ],
    "isstr": [
      "[[ \"${1}\" =~ [^0-9] ]]"
    ],
    "loadf": [
      "ZSH_CONFIG_DIR=\"$HOME/zsh-config\"",
      "ZSH_BIN_DIR=\"$ZSH_CONFIG_DIR/bin\"",
      "eval \"$(${ZSH_BIN_DIR}/ruby/functions.rb get ${1})\""
    ],
    "loadf.list": [
      "ZSH_CONFIG_DIR=\"$HOME/zsh-config\"",
      "ZSH_BIN_DIR=\"$ZSH_CONFIG_DIR/bin\"",
      "${ZSH_BIN_DIR}/ruby/functions.rb list-all-functions"
    ],
    "nil": [
      "local name=\"$1\"",
      "local value=\"$(cat /dev/null)\"",
      "eval \"function $name() echo $value;\""
    ],
    "p": [
      "pbpaste"
    ],
    "please": [
      "sudo !!"
    ],
    "plux": [
      "chmod +x \"${1}\""
    ],
    "reverse": [
      "perl -e 'print reverse <>'"
    ],
    "rm.dsstore": [
      "find $(pwd) -name '*.DS_Store' -type f -ls -delete"
    ],
    "rm.emptydir": [
      "find $(pwd) -type d -empty -print -delete"
    ],
    "rm.emptyfiles": [
      "find $(pwd) -type f -empty -print -delete"
    ],
    "safequote": [
      "local input=\"$1\"",
      "local quoted=\"\"",
      "",
      "# Escape special characters",
      "quoted=$(printf '%q' \"$input\")",
      "# Return the safely quoted string",
      "echo \"$quoted\""
    ],
    "symbol": [
      "use xxd; echo \"${1:-$RANDOM}\" | xxd -p"
    ],
    "timestamp": [
      "date +'%Y-%m-%d %H:%M:%S'"
    ],
    "with": [
      "# like `use` in `.zshrc`, except one line",
      "{ command -v \"${1}\" >|/dev/null 2>&1; } >|/dev/null 2>&1 && true || { echo \"${1}\" not found; false; }"
    ],
    "checkuse": [
      "command -v use || echo 'use not available'"
    ],
    "red": [
      "print -P '%F{red}$@'"
    ],
    "green": [
      "print -P '%F{green}$@'"
    ],
    "yellow": [
      "print -P '%F{yellow}$@'"
    ],
    "blue": [
      "print -P '%F{blue}$@'"
    ],
    "checkloadf": [
      "use loadf"
    ],
    "rgbtohex": [
      "for var in \"$@\"; do",
      "  printf '%x' \"$var\"",
      "done",
      "printf '\\n'"
    ],
    "hextorgb": [
      "hex=\"$1\"",
      "printf '%d %d %d\\n' 0x${hex:0:2} 0x${hex:2:2} 0x${hex:4:2}"
    ],
    "mdtohtml": [
      "pandoc -f markdown -t html \"\""
    ],
    "wavtomp3": [
      "sox \"$1\" -C 256 -r 44.1k \"$2\""
    ],
    "mp3towav": [
      "sox \"$1\" \"$2\""
    ],
    "up": [
      "cd .."
    ],
    "generate-tree-index": [
      "rg --files | tree --fromfile -H ./ >| index.html"
    ],
    "generate-tree-map": [
      "rg --files | tree --fromfile -d --noreport -H ./ | pandoc -f html -t commonmark >| map.md"
    ],
    "togglewifi": [
      "networksetup -setairportpower en1 off",
      "sleep 3",
      "networksetup -setairportpower en1 on"
    ],
    "browser": [
      "ZSH_CONFIG_DIR=\"$HOME/zsh-config\"",
      "ZSH_BIN_DIR=\"$ZSH_CONFIG_DIR/bin\"",
      "\"${ZSH_BIN_DIR}/ruby/browser.rb\""
    ],
    "links": [
      "osascript -e \"tell application \\\"Google Chrome\\\" to get URL of tabs of windows\" | \\",
      "sd \",\" \"\\n\" | awk '{$1=$1}1'"
    ],
    "express": [
      "local name=\"${1}\"",
      "shift",
      "local value=\"${@}\"",
      "eval \"function ${name}() { echo ${value}; }\""
    ],
    "fail": [
      "echo \"failed\" && false"
    ],
    "success": [
      "echo \"success\" && true"
    ],
    "is": [
      "bash \"$ZSH_BIN_DIR/bash/is.sh\" \"$@\""
    ],
    "finder": [
      "open \"${1}\""
    ],
    "opts": [
      "setopt ksh_option_print",
      "if [[ -z ${options[$1]} ]]",
      "then",
      "red \"option not found: $1\"",
      "else",
      "local optvalue=${options[$1]}",
      "print $optvalue",
      "fi"
    ],
    "em": [
      "echo -e \"\\e[3m${@}\\e[0m\""
    ],
    "bkpconfig": [
      "(",
      "{",
      "\\cp \"${ZSH_CONFIG_DIR}/.zshrc\" \"${ZSH_CONFIG_DIR}/dotbkp\"",
      "\\cp \"${HOME}/.zshenv\" \"${ZSH_CONFIG_DIR}/dotbkp\"",
      "echo \"source $0\" >| \"${HOME}/.zshrc\"",
      "} &",
      ") >| /dev/null 2>&1"
    ],
    "use": [
      "test $(command -v \"$1\")"
    ],
    "rb": [
      "\"/usr/local/opt/ruby/bin/ruby\" --disable=gems -e \"$@\""
    ],
    "py": [
      "\"/usr/local/bin/python3\" -c \"$@\""
    ],
    "reload": [
      "source \"${ZSH_CONFIG_DIR}/.zshrc\" || exec zsh"
    ],
    "prev": [
      "cd \"${PREV}\" || cd < \"${HOME}/.zsh_reload.txt\""
    ],
    "cpl": [
      "copy \"$LAST\""
    ],
    "s": [
      "local arg=\"$1\"",
      "local dir=$({",
      "cat \"$HOME/.zsh_reload_prev.txt\";",
      "cat \"$HOME/.zsh_reload_curr.txt\";",
      "} | sort -u | fzf --wrap --query=\"$arg\" --select-1",
      ")",
      "cd \"${dir}\" || cd \"$PWD\""
    ],
    "copy": [
      "if [ -z \"$1\" ]",
      "then",
      "echo \"copy <file|variable|text>\"",
      "fi",
      "if [ -f \"$1\" ]",
      "then",
      "cat \"$1\" | pbcopy",
      "echo \"copied file: $1\"",
      "fi",
      "if [ -n \"${(P)1}\" ]",
      "then",
      "echo \"${(P)1}\" | pbcopy",
      "echo \"copied variable: $1\"",
      "fi",
      "echo \"$1\" | pbcopy"
    ],
    "modified": [
      "rb \"puts File.mtime(\\\"${1}\\\")\""
    ],
    "memory": [
      "nu -c \"{",
      "free: (sys|get mem|get free),",
      "used: (sys|get mem|get used),",
      "total: (sys|get mem|get total)",
      "}\""
    ],
    "purj": [
      "security find-generic-password -w -s \".zshrc\" -a \"$(whoami)\" | sudo -S purge >| /dev/null 2>&1"
    ],
    "updatehosts": [
      "/usr/local/opt/ruby/bin/ruby ${ZSH_BIN_DIR}/ruby/hosts.rb"
    ],
    "clearhosts": [
      "sudo nu -c \"echo 'https://0.0.0.0' | save --force /etc/hosts\""
    ]
  }
}